{"version":3,"sources":["logo.svg","component/MyNewDate.js","App.js","reportWebVitals.js","index.js"],"names":["currentYear","Date","getFullYear","fromMonth","toMonth","React","PropTypes","YearMonthForm","date","localeUtils","onChange","months","getMonths","years","i","push","handleChange","e","target","form","year","month","value","className","name","getMonth","map","MyNewDate","props","state","selectedDate","undefined","maximumDate","handleYearMonthChange","bind","handleDayClick","days","copy","Number","setDate","getDate","this","setState","addDate","noOfAllowedDays","day","disableDay","bankHolidayDates","bankingHolidayDate","daysOfWeek","after","before","date1","date2","console","log","dayPickerProps","disabledDays","getDay","captionElement","onDayClick","formatDate","parseDate","placeholder","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14fa55fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React , {Component} from 'react';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\nimport  { formatDate, parseDate,} from 'react-day-picker/moment';\r\n\r\nconst currentYear = new Date().getFullYear();\r\nconst fromMonth = new Date(currentYear, 0);\r\nconst toMonth = new Date(currentYear + 10, 11);\r\n\r\nconst {PropTypes} = React;\r\n\r\n\r\nfunction YearMonthForm({ date, localeUtils, onChange }) {\r\n    const months = localeUtils.getMonths();\r\nconst years = [];\r\n  for (let i = fromMonth.getFullYear(); i <= toMonth.getFullYear(); i += 1) {\r\n    years.push(i);\r\n  }\r\nconst handleChange = function handleChange(e) {\r\n    const { year, month } = e.target.form;\r\n    onChange(new Date(year.value, month.value));\r\n  };\r\n\r\n  return (\r\n    <form className=\"DayPicker-Caption\">\r\n      <select name=\"month\" onChange={handleChange} value={date.getMonth()}>\r\n        {months.map((month, i) => (\r\n          <option key={month} value={i}>\r\n            {month}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <select name=\"year\" onChange={handleChange} value={date.getFullYear()}>\r\n        {years.map(year => (\r\n          <option key={year} value={year}>\r\n            {year}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\nclass MyNewDate extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            selectedDate :  undefined, //handles selected date\r\n            maximumDate : undefined, //handles maximum range date\r\n            month: fromMonth\r\n        }\r\n        this.handleYearMonthChange = this.handleYearMonthChange.bind(this);\r\n        this.handleDayClick = this.handleDayClick.bind(this); //Binding the click event to select the specific date\r\n    }\r\n    //Adding the number of days to today's date (disable if the date is beyond range)\r\n    addDate(date,days){\r\n        const copy = new Date(Number(date));\r\n        copy.setDate(date.getDate() + days);\r\n        return copy;\r\n    } \r\n    componentDidMount(){\r\n        this.setState({maximumDate : this.addDate(new Date(),this.props.noOfAllowedDays)})\r\n    }\r\n    //implementation of handle click event \r\n    handleDayClick(day){\r\n        this.setState({selectedDate : day});\r\n    }\r\n    handleYearMonthChange(month) {\r\n        this.setState({ month });\r\n    }\r\n    \r\n    render(){\r\n        \r\n        var disableDay=[]; //initializing the empty array to store the dates which are going to be disable\r\n        this.props.bankHolidayDates.map((bankingHolidayDate)=>{\r\n             disableDay.push(bankingHolidayDate); //adding the dates to the array\r\n            });\r\n          disableDay.push({ daysOfWeek : [0, 6]}, //weekend disable \r\n                         {after: this.state.maximumDate, //out of range dates are disable here\r\n                         before: new Date()}\r\n                         );\r\n                         var date1 = new Date();\r\n                         var date2 = new Date(date1.getFullYear()+1,1,1);\r\n                         console.log(date2.getFullYear());\r\n                \r\n        return(\r\n            <div>\r\n                <div><DayPickerInput \r\n                dayPickerProps={{\r\n                    disabledDays:disableDay,\r\n                    fromMonth:new Date(),\r\n                    toMonth:new Date((new Date().getFullYear()+1),new Date().getMonth(),new Date().getDay()-1),\r\n\r\n                    captionElement:({ date, localeUtils }) => (\r\n                        <YearMonthForm\r\n                          date={date}\r\n                          localeUtils={localeUtils}\r\n                          onChange={this.handleYearMonthChange}\r\n                        />\r\n                      )\r\n\r\n\r\n                }}  onDayClick={this.handleDayClick}\r\n                formatDate={formatDate}\r\n                parseDate={parseDate}\r\n                placeholder={`${formatDate(new Date())}`}\r\n                \r\n                /></div>\r\n                <div>{this.selectedDate}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MyNewDate;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport MyNewDate from './component/MyNewDate'\n\nconst bankHolidayDates = [\n      new Date(2021,0,15),new Date(2021,0,5),\n      new Date(2021,0,25),new Date(2021,0,20)\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MyNewDate noOfAllowedDays={45} bankHolidayDates={bankHolidayDates}/> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}